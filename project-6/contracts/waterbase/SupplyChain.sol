pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Extracted,  // 0
    Filtered,  // 1
    Bottled,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Extracted;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the WaterCompany, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originWaterCompanyID; // Metamask-Ethereum address of the WaterCompany
    string  originWaterCompanyName; // WaterCompany Name
    string  originWaterCompanyInformation;  // WaterCompany Information
    string  originWaterCompanyLatitude; // WaterCompany Latitude
    string  originWaterCompanyLongitude;  // WaterCompany Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Extracted(uint upc);
  event Filtered(uint upc);
  event Bottled(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Extracted
  modifier extracted(uint _upc) {
    require(items[_upc].itemState == State.Extracted);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Filtered
  modifier filtered(uint _upc) {
    require(items[_upc].itemState == State.Filtered);

    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Bottled
  modifier bottled(uint _upc) {
    require(items[_upc].itemState == State.Bottled);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);

    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);

    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);

    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);

    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);

    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'extractWater' that allows a WaterCompany to mark an item 'Extracted'
  function extractWater(uint _upc, address _originWaterCompanyID, string _originWaterCompanyName, string _originWaterCompanyInformation, string  _originWaterCompanyLatitude, string  _originWaterCompanyLongitude, string  _productNotes) public 
  {
      

    // Add the new item as part of Extract
    items[sku].sku = sku ;
    items[sku].upc= _upc ;
    items[sku].ownerID= _originWaterCompanyID;
    items[sku].originWaterCompanyID=  _originWaterCompanyID ;
    items[sku].originWaterCompanyName = _originWaterCompanyName ;
    items[sku].originWaterCompanyInformation = _originWaterCompanyInformation;
    items[sku].originWaterCompanyLatitude= _originWaterCompanyLatitude ;
    items[sku].originWaterCompanyLongitude =  _originWaterCompanyLongitude;
    items[sku].productNotes= _productNotes ;
    items[sku].itemState = State.Extracted;


    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Extracted(_upc);
  }

  // Define a function 'filterWater' that allows a WaterCompany to mark an item 'Filtered'
  function filterWater(uint _upc)   public 
  // Call modifier to check if upc has passed previous supply chain stage
  extracted(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(msg.sender)
  {
    // Update the appropriate fields
        items[sku].itemState = State.Filtered;
    // Emit the appropriate event
        emit Filtered(sku);

  }

  // Define a function 'bottlingWater' that allows a WaterCompany to mark an item 'Bottled'
  function bottlingWater(uint _upc)   public 
  // Call modifier to check if upc has passed previous supply chain stage
  filtered(sku)
  // Call modifier to verify caller of this function
  verifyCaller(msg.sender)
  {
    // Update the appropriate fields
        items[sku].itemState = State.Bottled;
    // Emit the appropriate event
        emit Bottled(_upc);
  }

  // Define a function 'sellItem' that allows a WaterCompany to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price)    public 
  // Call modifier to check if upc has passed previous supply chain stage
  bottled(sku)
  // Call modifier to verify caller of this function
  verifyCaller(msg.sender)
  {
    // Update the appropriate fields   
      items[sku].productPrice = _price; 
      items[sku].itemState = State.ForSale;    
    // Emit the appropriate event
      emit ForSale(_upc);

  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc)   public payable
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(sku)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[sku].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(sku)  
    {
    address distributorID = msg.sender;
    uint price = items[sku].productPrice;

    // Update the appropriate fields - ownerID, distributorID, itemState
    items[sku].ownerID = distributorID;
    items[sku].distributorID =  distributorID ;
    items[sku].itemState = State.Sold; 
    // Transfer money to WaterCompany
    items[sku].originWaterCompanyID.transfer(price);

    // emit the appropriate event
    emit Sold( _upc);

  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc)  public  
    // Call modifier to check if upc has passed previous supply chain stage
    sold(sku)
    // Call modifier to verify caller of this function
      verifyCaller(msg.sender)

    {
    // Update the appropriate fields
    items[sku].itemState = State.Shipped;   
    // Emit the appropriate event
    emit Shipped( _upc);

  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc)  public 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(sku)
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    
    items[sku].ownerID= msg.sender ;
    items[sku].retailerID = msg.sender ;
    items[sku].itemState= State.Received;  

    // Emit the appropriate event
    emit Received( _upc);

  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc)  public 
    // Call modifier to check if upc has passed previous supply chain stage
    received(sku)
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[sku].ownerID= msg.sender ;
    items[sku].consumerID = msg.sender ;
    items[sku].itemState = State.Purchased;  

    // Emit the appropriate event
      emit Purchased( _upc);

  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originWaterCompanyID,
  string  originWaterCompanyName,
  string  originWaterCompanyInformation,
  string  originWaterCompanyLatitude,
  string  originWaterCompanyLongitude
  ) 
  {
  // Assign values to the 8 parameters
    itemSKU = items[_upc].sku ;
    itemUPC = items[_upc].upc ;
    ownerID = items[_upc].ownerID ;
    originWaterCompanyID = items[_upc].originWaterCompanyID ;
    originWaterCompanyName = items[_upc].originWaterCompanyName ;
    originWaterCompanyInformation = items[_upc].originWaterCompanyInformation ;
    originWaterCompanyLatitude = items[_upc].originWaterCompanyLatitude ;
    originWaterCompanyLongitude = items[_upc].originWaterCompanyLongitude ;

    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originWaterCompanyID,
  originWaterCompanyName,
  originWaterCompanyInformation,
  originWaterCompanyLatitude,
  originWaterCompanyLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  State    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
itemSKU = items[_upc].sku ;
itemUPC = items[_upc].upc ;
productID = items[_upc].productID ;
productNotes= items[_upc].productNotes ;
productPrice = items[_upc].productPrice ;
itemState = items[_upc].itemState ;
distributorID = items[_upc].distributorID ;
retailerID= items[_upc].retailerID ;
consumerID= items[_upc].consumerID ;
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
